# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../GettingStarted.rst:3
msgid "Getting Started with the LLVM System"
msgstr "开始使用LLVM系统"

#: ../../GettingStarted.rst:9
msgid "Overview"
msgstr "概述"

#: ../../GettingStarted.rst:11
msgid ""
"Welcome to LLVM! In order to get started, you first need to know some "
"basic information."
msgstr "欢迎来到LLVM的世界！为了帮助您快速入门，您首先需要了解一些基本信息。"

#: ../../GettingStarted.rst:14
msgid ""
"First, LLVM comes in three pieces. The first piece is the LLVM suite. "
"This contains all of the tools, libraries, and header files needed to use"
" LLVM.  It contains an assembler, disassembler, bitcode analyzer and "
"bitcode optimizer.  It also contains basic regression tests that can be "
"used to test the LLVM tools and the Clang front end."
msgstr ""
"首先，LLVM有三个主要部分。第一部分是LLVM套件。它包含了很多工具，代码库，以及必要的头文件。"
"它包含汇编器（assembler），反汇编器（disassembler），字节码分析器（bitcode analyzer）和字节码优化器（bitcode optimizer）。"
"它还包含了基本的回归测试，可以被用来测试LLVM工具链和Clang前端。"

#: ../../GettingStarted.rst:20
msgid ""
"The second piece is the `Clang <http://clang.llvm.org/>`_ front end.  "
"This component compiles C, C++, Objective C, and Objective C++ code into "
"LLVM bitcode. Once compiled into LLVM bitcode, a program can be "
"manipulated with the LLVM tools from the LLVM suite."
msgstr ""
"第二部分是 `Clang <http://clang.llvm.org/>`_ 前端。它可以编译C、C++、Objective C，Objective C++代码到LLVM字节码。"
"一旦编译到LLVM字节码,LLVM工具链就可以操作修改这个程序。"

#: ../../GettingStarted.rst:25
msgid ""
"There is a third, optional piece called Test Suite.  It is a suite of "
"programs with a testing harness that can be used to further test LLVM's "
"functionality and performance."
msgstr ""
"第三部分是可选的，一份测试套件。可以用来进一步检验LLVM的功能性和性能。"

#: ../../GettingStarted.rst:30
msgid "Getting Started Quickly (A Summary)"
msgstr "快速入门（总览）"

#: ../../GettingStarted.rst:32
msgid ""
"The LLVM Getting Started documentation may be out of date.  So, the "
"`Clang Getting Started <http://clang.llvm.org/get_started.html>`_ page "
"might also be a good place to start."
msgstr ""
"这份LLVM快速入门文档可能有点过时，所以你对clang感兴趣的话，直接阅读 `Clang Getting Started <http://clang.llvm.org/get_started.html>`_ 也许是个好选择。"


#: ../../GettingStarted.rst:36
msgid "Here's the short story for getting up and running quickly with LLVM:"
msgstr "快速开始使用LLVM的简介："

#: ../../GettingStarted.rst:38 ../../GettingStarted.rst:39
msgid "Read the documentation."
msgstr "读文档"

#: ../../GettingStarted.rst:40
msgid "Remember that you were warned twice about reading the documentation."
msgstr "一定记得读两遍文档。"

#: ../../GettingStarted.rst:41
msgid "Checkout LLVM:"
msgstr "获取LLVM源码："

#: ../../GettingStarted.rst:43 ../../GettingStarted.rst:48
#: ../../GettingStarted.rst:54 ../../GettingStarted.rst:60
#: ../../GettingStarted.rst:66 ../../GettingStarted.rst:73
#: ../../GettingStarted.rst:468
msgid "``cd where-you-want-llvm-to-live``"
msgstr ""

#: ../../GettingStarted.rst:44
msgid "``svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm``"
msgstr ""

#: ../../GettingStarted.rst:46
msgid "Checkout Clang:"
msgstr "获取Clang源码："

#: ../../GettingStarted.rst:49
msgid "``cd llvm/tools``"
msgstr ""

#: ../../GettingStarted.rst:50
msgid "``svn co http://llvm.org/svn/llvm-project/cfe/trunk clang``"
msgstr ""

#: ../../GettingStarted.rst:52
msgid "Checkout Compiler-RT (required to build the sanitizers):"
msgstr "获取Compiler-RT源码（构建sanitizers必备）："

#: ../../GettingStarted.rst:55 ../../GettingStarted.rst:61
#: ../../GettingStarted.rst:67 ../../GettingStarted.rst:74
msgid "``cd llvm/projects``"
msgstr ""

#: ../../GettingStarted.rst:56
msgid "``svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt``"
msgstr ""

#: ../../GettingStarted.rst:58
msgid "Checkout Libomp (required for OpenMP support):"
msgstr "获取Libomp源码（OpenMP支持必备）："

#: ../../GettingStarted.rst:62
msgid "``svn co http://llvm.org/svn/llvm-project/openmp/trunk openmp``"
msgstr ""

#: ../../GettingStarted.rst:64
msgid "Checkout libcxx and libcxxabi **[Optional]**:"
msgstr "获取libcxx和libcxxabi的源码 **[可选]** ："

#: ../../GettingStarted.rst:68
msgid "``svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx``"
msgstr ""

#: ../../GettingStarted.rst:69
msgid "``svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi``"
msgstr ""

#: ../../GettingStarted.rst:71
msgid "Get the Test Suite Source Code **[Optional]**"
msgstr "获取测试套件源码 **[可选]** ："

#: ../../GettingStarted.rst:75
msgid "``svn co http://llvm.org/svn/llvm-project/test-suite/trunk test-suite``"
msgstr ""

#: ../../GettingStarted.rst:77
msgid "Configure and build LLVM and Clang:"
msgstr "配置并构建LLVM和Clang："

#: ../../GettingStarted.rst:79
msgid ""
"The usual build uses `CMake <CMake.html>`_. If you would rather use "
"autotools, see `Building LLVM with autotools "
"<BuildingLLVMWithAutotools.html>`_. Although the build is known to work "
"with CMake >= 2.8.8, we recommend CMake >= v3.2, especially if you're "
"generating Ninja build files."
msgstr ""

#: ../../GettingStarted.rst:84
msgid "``cd where you want to build llvm``"
msgstr ""

#: ../../GettingStarted.rst:85
msgid "``mkdir build``"
msgstr ""

#: ../../GettingStarted.rst:86
msgid "``cd build``"
msgstr ""

#: ../../GettingStarted.rst:87
msgid "``cmake -G <generator> [options] <path to llvm sources>``"
msgstr ""

#: ../../GettingStarted.rst:89
msgid "Some common generators are:"
msgstr "一些常见的构建系统："

#: ../../GettingStarted.rst:91
msgid "``Unix Makefiles`` --- for generating make-compatible parallel makefiles."
msgstr "``Unix Makefiles`` --- 适合兼容GNU Make的构建系统"

#: ../../GettingStarted.rst:92
msgid "``Ninja`` --- for generating `Ninja <http://martine.github.io/ninja/>`"
msgstr "``Ninja`` --- 生成 `Ninja <http://martine.github.io/ninja/>`"

#: ../../GettingStarted.rst:93
msgid "build files. Most llvm developers use Ninja."
msgstr "构建配置。大多数LLVM开发者都使用Ninja（译者注：因为快很多）。"

#: ../../GettingStarted.rst:94
msgid "``Visual Studio`` --- for generating Visual Studio projects and"
msgstr "``Visual Studio`` --- 生成Visual Studio工程文件和"

#: ../../GettingStarted.rst:95
msgid "solutions."
msgstr "sln解决方案文件。"

#: ../../GettingStarted.rst:96
msgid "``Xcode`` --- for generating Xcode projects."
msgstr "``Xcode`` --- 生成Xcode项目。"

#: ../../GettingStarted.rst:98
msgid "Some Common options:"
msgstr "一些常见选项："

#: ../../GettingStarted.rst:100
msgid ""
"``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full"
" pathname of where you want the LLVM tools and libraries to be installed "
"(default ``/usr/local``)."
msgstr ""

#: ../../GettingStarted.rst:104
msgid ""
"``-DCMAKE_BUILD_TYPE=type`` --- Valid options for *type* are Debug, "
"Release, RelWithDebInfo, and MinSizeRel. Default is Debug."
msgstr ""

#: ../../GettingStarted.rst:107
msgid ""
"``-DLLVM_ENABLE_ASSERTIONS=On`` --- Compile with assertion checks enabled"
" (default is Yes for Debug builds, No for all other build types)."
msgstr ""

#: ../../GettingStarted.rst:110
msgid "Run your build tool of choice!"
msgstr ""

#: ../../GettingStarted.rst:112
msgid "The default target (i.e. ``make``) will build all of LLVM"
msgstr "默认的构建目标（例如，直接执行 ``make``）将会构建整个LLVM"

#: ../../GettingStarted.rst:114
msgid ""
"The ``check-all`` target (i.e. ``make check-all``) will run the "
"regression tests to ensure everything is in working order."
msgstr "构建目标 ``check-all`` （例如，执行 ``make check-all``）将会执行回归测试来确保所有部分都被正确有序地被执行。"

#: ../../GettingStarted.rst:117
msgid ""
"CMake will generate build targets for each tool and library, and most "
"LLVM sub-projects generate their own ``check-<project>`` target."
msgstr "CMake将会为每个tools文件夹中的每个工具，以及每个库文件都创建一个构建目标，并且大多数LLVM子项目都有自己的 ``check-<project>`` 构建目标。"

#: ../../GettingStarted.rst:120
msgid "For more information see `CMake <CMake.html>`_"
msgstr "更多详细内容，请参考 `CMake <CMake.html>`_ 相关文档。"

#: ../../GettingStarted.rst:122
msgid ""
"If you get an \"internal compiler error (ICE)\" or test failures, see "
"`below`_."
msgstr "如果您遇见了 \"internal compiler error (ICE)\" 这一错误，或测试失败，请参考 `below`_ 。"

#: ../../GettingStarted.rst:125
msgid ""
"Consult the `Getting Started with LLVM`_ section for detailed information"
" on configuring and compiling LLVM.  See `Setting Up Your Environment`_ "
"for tips that simplify working with the Clang front end and LLVM tools.  "
"Go to `Program Layout`_ to learn about the layout of the source code "
"tree."
msgstr ""


#: ../../GettingStarted.rst:131
msgid "Requirements"
msgstr "安装要求"

#: ../../GettingStarted.rst:133
msgid ""
"Before you begin to use the LLVM system, review the requirements given "
"below. This may save you some trouble by knowing ahead of time what "
"hardware and software you will need."
msgstr ""
"在你开始使用LLVM系统前，请先检查必要的要求。了解软硬件配置要求，这可能可以减少您很多的麻烦。"


#: ../../GettingStarted.rst:138
msgid "Hardware"
msgstr "硬件"

#: ../../GettingStarted.rst:140
msgid "LLVM is known to work on the following host platforms:"
msgstr "LLVM 目前可以运行在如下许多非常流行的平台下："

#: ../../GettingStarted.rst:143
msgid "OS"
msgstr "操作系统"

#: ../../GettingStarted.rst:143
msgid "Arch"
msgstr "架构"

#: ../../GettingStarted.rst:143
msgid "Compilers"
msgstr "编译器"

#: ../../GettingStarted.rst:145 ../../GettingStarted.rst:146
#: ../../GettingStarted.rst:147 ../../GettingStarted.rst:148
msgid "Linux"
msgstr ""

#: ../../GettingStarted.rst:145 ../../GettingStarted.rst:150
#: ../../GettingStarted.rst:155
msgid "x86\\ :sup:`1`"
msgstr ""

#: ../../GettingStarted.rst:145 ../../GettingStarted.rst:146
#: ../../GettingStarted.rst:147 ../../GettingStarted.rst:148
#: ../../GettingStarted.rst:150 ../../GettingStarted.rst:151
#: ../../GettingStarted.rst:153
msgid "GCC, Clang"
msgstr ""

#: ../../GettingStarted.rst:146 ../../GettingStarted.rst:151
msgid "amd64"
msgstr ""

#: ../../GettingStarted.rst:147
msgid "ARM\\ :sup:`4`"
msgstr ""

#: ../../GettingStarted.rst:148 ../../GettingStarted.rst:152
msgid "PowerPC"
msgstr ""

#: ../../GettingStarted.rst:149
msgid "Solaris"
msgstr ""

#: ../../GettingStarted.rst:149
msgid "V9 (Ultrasparc)"
msgstr ""

#: ../../GettingStarted.rst:149 ../../GettingStarted.rst:152
#: ../../GettingStarted.rst:154
msgid "GCC"
msgstr ""

#: ../../GettingStarted.rst:150 ../../GettingStarted.rst:151
msgid "FreeBSD"
msgstr ""

#: ../../GettingStarted.rst:152
msgid "MacOS X\\ :sup:`2`"
msgstr ""

#: ../../GettingStarted.rst:153
msgid "MacOS X"
msgstr ""

#: ../../GettingStarted.rst:153
msgid "x86"
msgstr ""

#: ../../GettingStarted.rst:154
msgid "Cygwin/Win32"
msgstr ""

#: ../../GettingStarted.rst:154
msgid "x86\\ :sup:`1, 3`"
msgstr ""

#: ../../GettingStarted.rst:155
msgid "Windows"
msgstr ""

#: ../../GettingStarted.rst:155 ../../GettingStarted.rst:156
msgid "Visual Studio"
msgstr ""

#: ../../GettingStarted.rst:156
msgid "Windows x64"
msgstr ""

#: ../../GettingStarted.rst:156
msgid "x86-64"
msgstr ""

#: ../../GettingStarted.rst:161
msgid "Code generation supported for Pentium processors and up"
msgstr ""

#: ../../GettingStarted.rst:162
msgid "Code generation supported for 32-bit ABI only"
msgstr ""

#: ../../GettingStarted.rst:163
msgid ""
"To use LLVM modules on Win32-based system, you may configure LLVM with "
"``-DBUILD_SHARED_LIBS=On`` for CMake builds or ``--enable-shared`` for "
"configure builds."
msgstr ""

#: ../../GettingStarted.rst:166
msgid "MCJIT not working well pre-v7, old JIT engine not supported any more."
msgstr ""

#: ../../GettingStarted.rst:168
msgid ""
"Note that you will need about 1-3 GB of space for a full LLVM build in "
"Debug mode, depending on the system (it is so large because of all the "
"debugging information and the fact that the libraries are statically "
"linked into multiple tools).  If you do not need many of the tools and "
"you are space-conscious, you can pass ``ONLY_TOOLS=\"tools you need\"`` "
"to make.  The Release build requires considerably less space."
msgstr ""

#: ../../GettingStarted.rst:175
msgid ""
"The LLVM suite *may* compile on other platforms, but it is not guaranteed"
" to do so.  If compilation is successful, the LLVM utilities should be "
"able to assemble, disassemble, analyze, and optimize LLVM bitcode.  Code "
"generation should work as well, although the generated native code may "
"not work on your platform."
msgstr ""

#: ../../GettingStarted.rst:182
msgid "Software"
msgstr "软件"

#: ../../GettingStarted.rst:184
msgid ""
"Compiling LLVM requires that you have several software packages "
"installed. The table below lists those required packages. The Package "
"column is the usual name for the software package that LLVM depends on. "
"The Version column provides \"known to work\" versions of the package. "
"The Notes column describes how LLVM uses the package and provides other "
"details."
msgstr ""

#: ../../GettingStarted.rst:191
msgid "Package"
msgstr ""

#: ../../GettingStarted.rst:191
msgid "Version"
msgstr ""

#: ../../GettingStarted.rst:191
msgid "Notes"
msgstr ""

#: ../../GettingStarted.rst:193
msgid "`GNU Make <http://savannah.gnu.org/projects/make>`_"
msgstr ""

#: ../../GettingStarted.rst:193
msgid "3.79, 3.79.1"
msgstr ""

#: ../../GettingStarted.rst:193
msgid "Makefile/build processor"
msgstr ""

#: ../../GettingStarted.rst:194
msgid "`GCC <http://gcc.gnu.org/>`_"
msgstr ""

#: ../../GettingStarted.rst:194
msgid ">=4.7.0"
msgstr ""

#: ../../GettingStarted.rst:194
msgid "C/C++ compiler\\ :sup:`1`"
msgstr ""

#: ../../GettingStarted.rst:195
msgid "`python <http://www.python.org/>`_"
msgstr ""

#: ../../GettingStarted.rst:195
msgid ">=2.7"
msgstr ""

#: ../../GettingStarted.rst:195
msgid "Automated test suite\\ :sup:`2`"
msgstr ""

#: ../../GettingStarted.rst:196
msgid "`GNU M4 <http://savannah.gnu.org/projects/m4>`_"
msgstr ""

#: ../../GettingStarted.rst:196
msgid "1.4"
msgstr ""

#: ../../GettingStarted.rst:196
msgid "Macro processor for configuration\\ :sup:`3`"
msgstr ""

#: ../../GettingStarted.rst:197
msgid "`GNU Autoconf <http://www.gnu.org/software/autoconf/>`_"
msgstr ""

#: ../../GettingStarted.rst:197
msgid "2.60"
msgstr ""

#: ../../GettingStarted.rst:197
msgid "Configuration script builder\\ :sup:`3`"
msgstr ""

#: ../../GettingStarted.rst:198
msgid "`GNU Automake <http://www.gnu.org/software/automake/>`_"
msgstr ""

#: ../../GettingStarted.rst:198
msgid "1.9.6"
msgstr ""

#: ../../GettingStarted.rst:198
msgid "aclocal macro generator\\ :sup:`3`"
msgstr ""

#: ../../GettingStarted.rst:199
msgid "`libtool <http://savannah.gnu.org/projects/libtool>`_"
msgstr ""

#: ../../GettingStarted.rst:199
msgid "1.5.22"
msgstr ""

#: ../../GettingStarted.rst:199
msgid "Shared library manager\\ :sup:`3`"
msgstr ""

#: ../../GettingStarted.rst:200
msgid "`zlib <http://zlib.net>`_"
msgstr ""

#: ../../GettingStarted.rst:200
msgid ">=1.2.3.4"
msgstr ""

#: ../../GettingStarted.rst:200
msgid "Compression library\\ :sup:`4`"
msgstr ""

#: ../../GettingStarted.rst:205
msgid ""
"Only the C and C++ languages are needed so there's no need to build the "
"other languages for LLVM's purposes. See `below` for specific version "
"info."
msgstr ""

#: ../../GettingStarted.rst:208
msgid ""
"Only needed if you want to run the automated test suite in the "
"``llvm/test`` directory."
msgstr ""

#: ../../GettingStarted.rst:210
msgid ""
"If you want to make changes to the configure scripts, you will need GNU "
"autoconf (2.60), and consequently, GNU M4 (version 1.4 or higher). You "
"will also need automake (1.9.6). We only use aclocal from that package."
msgstr ""

#: ../../GettingStarted.rst:213
msgid ""
"Optional, adds compression / uncompression capabilities to selected LLVM "
"tools."
msgstr ""

#: ../../GettingStarted.rst:216
msgid ""
"Additionally, your compilation host is expected to have the usual "
"plethora of Unix utilities. Specifically:"
msgstr ""

#: ../../GettingStarted.rst:219
msgid "**ar** --- archive library builder"
msgstr ""

#: ../../GettingStarted.rst:220
msgid "**bzip2** --- bzip2 command for distribution generation"
msgstr ""

#: ../../GettingStarted.rst:221
msgid "**bunzip2** --- bunzip2 command for distribution checking"
msgstr ""

#: ../../GettingStarted.rst:222
msgid "**chmod** --- change permissions on a file"
msgstr ""

#: ../../GettingStarted.rst:223
msgid "**cat** --- output concatenation utility"
msgstr ""

#: ../../GettingStarted.rst:224
msgid "**cp** --- copy files"
msgstr ""

#: ../../GettingStarted.rst:225
msgid "**date** --- print the current date/time"
msgstr ""

#: ../../GettingStarted.rst:226
msgid "**echo** --- print to standard output"
msgstr ""

#: ../../GettingStarted.rst:227
msgid "**egrep** --- extended regular expression search utility"
msgstr ""

#: ../../GettingStarted.rst:228
msgid "**find** --- find files/dirs in a file system"
msgstr ""

#: ../../GettingStarted.rst:229
msgid "**grep** --- regular expression search utility"
msgstr ""

#: ../../GettingStarted.rst:230
msgid "**gzip** --- gzip command for distribution generation"
msgstr ""

#: ../../GettingStarted.rst:231
msgid "**gunzip** --- gunzip command for distribution checking"
msgstr ""

#: ../../GettingStarted.rst:232
msgid "**install** --- install directories/files"
msgstr ""

#: ../../GettingStarted.rst:233
msgid "**mkdir** --- create a directory"
msgstr ""

#: ../../GettingStarted.rst:234
msgid "**mv** --- move (rename) files"
msgstr ""

#: ../../GettingStarted.rst:235
msgid "**ranlib** --- symbol table builder for archive libraries"
msgstr ""

#: ../../GettingStarted.rst:236
msgid "**rm** --- remove (delete) files and directories"
msgstr ""

#: ../../GettingStarted.rst:237
msgid "**sed** --- stream editor for transforming output"
msgstr ""

#: ../../GettingStarted.rst:238
msgid "**sh** --- Bourne shell for make build scripts"
msgstr ""

#: ../../GettingStarted.rst:239
msgid "**tar** --- tape archive for distribution generation"
msgstr ""

#: ../../GettingStarted.rst:240
msgid "**test** --- test things in file system"
msgstr ""

#: ../../GettingStarted.rst:241
msgid "**unzip** --- unzip command for distribution checking"
msgstr ""

#: ../../GettingStarted.rst:242
msgid "**zip** --- zip command for distribution generation"
msgstr ""

#: ../../GettingStarted.rst:248
msgid "Host C++ Toolchain, both Compiler and Standard Library"
msgstr ""

#: ../../GettingStarted.rst:250
msgid ""
"LLVM is very demanding of the host C++ compiler, and as such tends to "
"expose bugs in the compiler. We are also planning to follow improvements "
"and developments in the C++ language and library reasonably closely. As "
"such, we require a modern host C++ toolchain, both compiler and standard "
"library, in order to build LLVM."
msgstr ""

#: ../../GettingStarted.rst:256
msgid ""
"For the most popular host toolchains we check for specific minimum "
"versions in our build systems:"
msgstr ""

#: ../../GettingStarted.rst:259
msgid "Clang 3.1"
msgstr ""

#: ../../GettingStarted.rst:260
msgid "GCC 4.7"
msgstr ""

#: ../../GettingStarted.rst:261
msgid "Visual Studio 2013"
msgstr ""

#: ../../GettingStarted.rst:263
msgid ""
"Anything older than these toolchains *may* work, but will require forcing"
" the build system with a special option and is not really a supported "
"host platform. Also note that older versions of these compilers have "
"often crashed or miscompiled LLVM."
msgstr ""

#: ../../GettingStarted.rst:268
msgid ""
"For less widely used host toolchains such as ICC or xlC, be aware that a "
"very recent version may be required to support all of the C++ features "
"used in LLVM."
msgstr ""

#: ../../GettingStarted.rst:271
msgid ""
"We track certain versions of software that are *known* to fail when used "
"as part of the host toolchain. These even include linkers at times."
msgstr ""

#: ../../GettingStarted.rst:274
msgid ""
"**GCC 4.6.3 on ARM**: Miscompiles ``llvm-readobj`` at ``-O3``. A test "
"failure in ``test/Object/readobj-shared-object.test`` is one symptom of "
"the problem."
msgstr ""

#: ../../GettingStarted.rst:277
msgid ""
"**GNU ld 2.16.X**. Some 2.16.X versions of the ld linker will produce "
"very long warning messages complaining that some "
"\"``.gnu.linkonce.t.*``\" symbol was defined in a discarded section. You "
"can safely ignore these messages as they are erroneous and the linkage is"
" correct.  These messages disappear using ld 2.17."
msgstr ""

#: ../../GettingStarted.rst:282
msgid ""
"**GNU binutils 2.17**: Binutils 2.17 contains `a bug "
"<http://sourceware.org/bugzilla/show_bug.cgi?id=3111>`__ which causes "
"huge link times (minutes instead of seconds) when building LLVM.  We "
"recommend upgrading to a newer version (2.17.50.0.4 or later)."
msgstr ""

#: ../../GettingStarted.rst:287
msgid ""
"**GNU Binutils 2.19.1 Gold**: This version of Gold contained `a bug "
"<http://sourceware.org/bugzilla/show_bug.cgi?id=9836>`__ which causes "
"intermittent failures when building LLVM with position independent code."
"  The symptom is an error about cyclic dependencies.  We recommend "
"upgrading to a newer version of Gold."
msgstr ""

#: ../../GettingStarted.rst:293
msgid ""
"**Clang 3.0 with libstdc++ 4.7.x**: a few Linux distributions (Ubuntu "
"12.10, Fedora 17) have both Clang 3.0 and libstdc++ 4.7 in their "
"repositories.  Clang 3.0 does not implement a few builtins that are used "
"in this library.  We recommend using the system GCC to compile LLVM and "
"Clang in this case."
msgstr ""

#: ../../GettingStarted.rst:298
msgid ""
"**Clang 3.0 on Mageia 2**.  There's a packaging issue: Clang can not find"
" at least some (``cxxabi.h``) libstdc++ headers."
msgstr ""

#: ../../GettingStarted.rst:301
msgid ""
"**Clang in C++11 mode and libstdc++ 4.7.2**.  This version of libstdc++ "
"contained `a bug <http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53841>`__ "
"which causes Clang to refuse to compile condition_variable header file.  "
"At the time of writing, this breaks LLD build."
msgstr ""

#: ../../GettingStarted.rst:307
msgid "Getting a Modern Host C++ Toolchain"
msgstr "获取一套现代的C++工具链"

#: ../../GettingStarted.rst:309
msgid ""
"This section mostly applies to Linux and older BSDs. On Mac OS X, you "
"should have a sufficiently modern Xcode, or you will likely need to "
"upgrade until you do. On Windows, just use Visual Studio 2013 as the host"
" compiler, it is explicitly supported and widely available. FreeBSD 10.0 "
"and newer have a modern Clang as the system compiler."
msgstr ""

#: ../../GettingStarted.rst:315
msgid ""
"However, some Linux distributions and some other or older BSDs sometimes "
"have extremely old versions of GCC. These steps attempt to help you "
"upgrade you compiler even on such a system. However, if at all possible, "
"we encourage you to use a recent version of a distribution with a modern "
"system compiler that meets these requirements. Note that it is tempting "
"to to install a prior version of Clang and libc++ to be the host "
"compiler, however libc++ was not well tested or set up to build on Linux "
"until relatively recently. As a consequence, this guide suggests just "
"using libstdc++ and a modern GCC as the initial host in a bootstrap, and "
"then using Clang (and potentially libc++)."
msgstr ""

#: ../../GettingStarted.rst:325
msgid ""
"The first step is to get a recent GCC toolchain installed. The most "
"common distribution on which users have struggled with the version "
"requirements is Ubuntu Precise, 12.04 LTS. For this distribution, one "
"easy option is to install the `toolchain testing PPA`_ and use it to "
"install a modern GCC. There is a really nice discussions of this on the "
"`ask ubuntu stack exchange`_. However, not all users can use PPAs and "
"there are many other distributions, so it may be necessary (or just "
"useful, if you're here you *are* doing compiler development after all) to"
" build and install GCC from source. It is also quite easy to do these "
"days."
msgstr ""

#: ../../GettingStarted.rst:340
msgid "Easy steps for installing GCC 4.8.2:"
msgstr ""

#: ../../GettingStarted.rst:359
msgid ""
"For more details, check out the excellent `GCC wiki entry`_, where I got "
"most of this information from."
msgstr ""

#: ../../GettingStarted.rst:365
msgid ""
"Once you have a GCC toolchain, configure your build of LLVM to use the "
"new toolchain for your host compiler and C++ standard library. Because "
"the new version of libstdc++ is not on the system library search path, "
"you need to pass extra linker flags so that it can be found at link time "
"(``-L``) and at runtime (``-rpath``). If you are using CMake, this "
"invocation should produce working binaries:"
msgstr ""

#: ../../GettingStarted.rst:379
msgid ""
"If you fail to set rpath, most LLVM binaries will fail on startup with a "
"message from the loader similar to ``libstdc++.so.6: version "
"`GLIBCXX_3.4.20' not found``. This means you need to tweak the -rpath "
"linker flag."
msgstr ""

#: ../../GettingStarted.rst:383
msgid ""
"When you build Clang, you will need to give *it* access to modern C++11 "
"standard library in order to use it as your new host in part of a "
"bootstrap. There are two easy ways to do this, either build (and install)"
" libc++ along with Clang and then use it with the ``-stdlib=libc++`` "
"compile and link flag, or install Clang into the same prefix "
"(``$HOME/toolchains`` above) as GCC. Clang will look within its own "
"prefix for libstdc++ and use it if found. You can also add an explicit "
"prefix for Clang to look in for a GCC toolchain with the ``--gcc-"
"toolchain=/opt/my/gcc/prefix`` flag, passing it to both compile and link "
"commands when using your just-built-Clang to bootstrap."
msgstr ""

#: ../../GettingStarted.rst:396
msgid "Getting Started with LLVM"
msgstr "开始使用LLVM"

#: ../../GettingStarted.rst:398
msgid ""
"The remainder of this guide is meant to get you up and running with LLVM "
"and to give you some basic information about the LLVM environment."
msgstr ""

#: ../../GettingStarted.rst:401
msgid ""
"The later sections of this guide describe the `general layout`_ of the "
"LLVM source tree, a `simple example`_ using the LLVM tool chain, and "
"`links`_ to find more information about LLVM or to get help via e-mail."
msgstr ""

#: ../../GettingStarted.rst:406
msgid "Terminology and Notation"
msgstr "术语和符号"

#: ../../GettingStarted.rst:408
msgid ""
"Throughout this manual, the following names are used to denote paths "
"specific to the local system and working environment.  *These are not "
"environment variables you need to set but just strings used in the rest "
"of this document below*.  In any of the examples below, simply replace "
"each of these names with the appropriate pathname on your local system.  "
"All these paths are absolute:"
msgstr ""

#: ../../GettingStarted.rst:414
msgid "``SRC_ROOT``"
msgstr ""

#: ../../GettingStarted.rst:416
msgid "This is the top level directory of the LLVM source tree."
msgstr ""

#: ../../GettingStarted.rst:418
msgid "``OBJ_ROOT``"
msgstr ""

#: ../../GettingStarted.rst:420
msgid ""
"This is the top level directory of the LLVM object tree (i.e. the tree "
"where object files and compiled programs will be placed.  It can be the "
"same as SRC_ROOT)."
msgstr ""

#: ../../GettingStarted.rst:427
msgid "Setting Up Your Environment"
msgstr "设置环境变量"

#: ../../GettingStarted.rst:429
msgid ""
"In order to compile and use LLVM, you may need to set some environment "
"variables."
msgstr ""

#: ../../GettingStarted.rst:432
msgid "``LLVM_LIB_SEARCH_PATH=/path/to/your/bitcode/libs``"
msgstr ""

#: ../../GettingStarted.rst:434
msgid ""
"[Optional] This environment variable helps LLVM linking tools find the "
"locations of your bitcode libraries. It is provided only as a convenience"
" since you can specify the paths using the -L options of the tools and "
"the C/C++ front-end will automatically use the bitcode files installed in"
" its ``lib`` directory."
msgstr ""

#: ../../GettingStarted.rst:441
msgid "Unpacking the LLVM Archives"
msgstr ""

#: ../../GettingStarted.rst:443
msgid ""
"If you have the LLVM distribution, you will need to unpack it before you "
"can begin to compile it.  LLVM is distributed as a set of two files: the "
"LLVM suite and the LLVM GCC front end compiled for your platform.  There "
"is an additional test suite that is optional.  Each file is a TAR archive"
" that is compressed with the gzip program."
msgstr ""

#: ../../GettingStarted.rst:449
msgid "The files are as follows, with *x.y* marking the version number:"
msgstr ""

#: ../../GettingStarted.rst:451
msgid "``llvm-x.y.tar.gz``"
msgstr ""

#: ../../GettingStarted.rst:453
msgid "Source release for the LLVM libraries and tools."
msgstr ""

#: ../../GettingStarted.rst:455
msgid "``llvm-test-x.y.tar.gz``"
msgstr ""

#: ../../GettingStarted.rst:457
msgid "Source release for the LLVM test-suite."
msgstr ""

#: ../../GettingStarted.rst:462
msgid "Checkout LLVM from Subversion"
msgstr ""

#: ../../GettingStarted.rst:464
msgid ""
"If you have access to our Subversion repository, you can get a fresh copy"
" of the entire source code.  All you need to do is check it out from "
"Subversion as follows:"
msgstr ""

#: ../../GettingStarted.rst:469
msgid "Read-Only: ``svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm``"
msgstr ""

#: ../../GettingStarted.rst:470
msgid ""
"Read-Write: ``svn co https://user@llvm.org/svn/llvm-project/llvm/trunk "
"llvm``"
msgstr ""

#: ../../GettingStarted.rst:472
msgid ""
"This will create an '``llvm``' directory in the current directory and "
"fully populate it with the LLVM source code, Makefiles, test directories,"
" and local copies of documentation files."
msgstr ""

#: ../../GettingStarted.rst:476
msgid ""
"If you want to get a specific release (as opposed to the most recent "
"revision), you can checkout it from the '``tags``' directory (instead of "
"'``trunk``'). The following releases are located in the following "
"subdirectories of the '``tags``' directory:"
msgstr ""

#: ../../GettingStarted.rst:481
msgid "Release 3.4: **RELEASE_34/final**"
msgstr ""

#: ../../GettingStarted.rst:482
msgid "Release 3.3: **RELEASE_33/final**"
msgstr ""

#: ../../GettingStarted.rst:483
msgid "Release 3.2: **RELEASE_32/final**"
msgstr ""

#: ../../GettingStarted.rst:484
msgid "Release 3.1: **RELEASE_31/final**"
msgstr ""

#: ../../GettingStarted.rst:485
msgid "Release 3.0: **RELEASE_30/final**"
msgstr ""

#: ../../GettingStarted.rst:486
msgid "Release 2.9: **RELEASE_29/final**"
msgstr ""

#: ../../GettingStarted.rst:487
msgid "Release 2.8: **RELEASE_28**"
msgstr ""

#: ../../GettingStarted.rst:488
msgid "Release 2.7: **RELEASE_27**"
msgstr ""

#: ../../GettingStarted.rst:489
msgid "Release 2.6: **RELEASE_26**"
msgstr ""

#: ../../GettingStarted.rst:490
msgid "Release 2.5: **RELEASE_25**"
msgstr ""

#: ../../GettingStarted.rst:491
msgid "Release 2.4: **RELEASE_24**"
msgstr ""

#: ../../GettingStarted.rst:492
msgid "Release 2.3: **RELEASE_23**"
msgstr ""

#: ../../GettingStarted.rst:493
msgid "Release 2.2: **RELEASE_22**"
msgstr ""

#: ../../GettingStarted.rst:494
msgid "Release 2.1: **RELEASE_21**"
msgstr ""

#: ../../GettingStarted.rst:495
msgid "Release 2.0: **RELEASE_20**"
msgstr ""

#: ../../GettingStarted.rst:496
msgid "Release 1.9: **RELEASE_19**"
msgstr ""

#: ../../GettingStarted.rst:497
msgid "Release 1.8: **RELEASE_18**"
msgstr ""

#: ../../GettingStarted.rst:498
msgid "Release 1.7: **RELEASE_17**"
msgstr ""

#: ../../GettingStarted.rst:499
msgid "Release 1.6: **RELEASE_16**"
msgstr ""

#: ../../GettingStarted.rst:500
msgid "Release 1.5: **RELEASE_15**"
msgstr ""

#: ../../GettingStarted.rst:501
msgid "Release 1.4: **RELEASE_14**"
msgstr ""

#: ../../GettingStarted.rst:502
msgid "Release 1.3: **RELEASE_13**"
msgstr ""

#: ../../GettingStarted.rst:503
msgid "Release 1.2: **RELEASE_12**"
msgstr ""

#: ../../GettingStarted.rst:504
msgid "Release 1.1: **RELEASE_11**"
msgstr ""

#: ../../GettingStarted.rst:505
msgid "Release 1.0: **RELEASE_1**"
msgstr ""

#: ../../GettingStarted.rst:507
msgid ""
"If you would like to get the LLVM test suite (a separate package as of "
"1.4), you get it from the Subversion repository:"
msgstr ""

#: ../../GettingStarted.rst:515
msgid ""
"By placing it in the ``llvm/projects``, it will be automatically "
"configured by the LLVM configure script as well as automatically updated "
"when you run ``svn update``."
msgstr ""

#: ../../GettingStarted.rst:520
msgid "Git Mirror"
msgstr ""

#: ../../GettingStarted.rst:522
msgid ""
"Git mirrors are available for a number of LLVM subprojects. These mirrors"
" sync automatically with each Subversion commit and contain all necessary"
" git-svn marks (so, you can recreate git-svn metadata locally). Note that"
" right now mirrors reflect only ``trunk`` for each project. You can do "
"the read-only Git clone of LLVM via:"
msgstr ""

#: ../../GettingStarted.rst:532
msgid "If you want to check out clang too, run:"
msgstr ""

#: ../../GettingStarted.rst:539
msgid ""
"If you want to check out compiler-rt (required to build the sanitizers), "
"run:"
msgstr ""

#: ../../GettingStarted.rst:546
msgid "If you want to check out libomp (required for OpenMP support), run:"
msgstr ""

#: ../../GettingStarted.rst:553
msgid "If you want to check out libcxx and libcxxabi (optional), run:"
msgstr ""

#: ../../GettingStarted.rst:561
msgid "If you want to check out the Test Suite Source Code (optional), run:"
msgstr ""

#: ../../GettingStarted.rst:568
msgid ""
"Since the upstream repository is in Subversion, you should use ``git pull"
" --rebase`` instead of ``git pull`` to avoid generating a non-linear "
"history in your clone.  To configure ``git pull`` to pass ``--rebase`` by"
" default on the master branch, run the following command:"
msgstr ""

#: ../../GettingStarted.rst:578
msgid "Sending patches with Git"
msgstr ""

#: ../../GettingStarted.rst:580
msgid ""
"Please read `Developer Policy <DeveloperPolicy.html#one-off-patches>`_, "
"too."
msgstr ""

#: ../../GettingStarted.rst:582
msgid ""
"Assume ``master`` points the upstream and ``mybranch`` points your "
"working branch, and ``mybranch`` is rebased onto ``master``.  At first "
"you may check sanity of whitespaces:"
msgstr ""

#: ../../GettingStarted.rst:590
msgid "The easiest way to generate a patch is as below:"
msgstr ""

#: ../../GettingStarted.rst:596
msgid ""
"It is a little different from svn-generated diff. git-diff-generated diff"
" has prefixes like ``a/`` and ``b/``. Don't worry, most developers might "
"know it could be accepted with ``patch -p1 -N``."
msgstr ""

#: ../../GettingStarted.rst:600
msgid ""
"But you may generate patchset with git-format-patch. It generates by-"
"each-commit patchset. To generate patch files to attach to your article:"
msgstr ""

#: ../../GettingStarted.rst:607
msgid ""
"If you would like to send patches directly, you may use git-send-email or"
" git-imap-send. Here is an example to generate the patchset in Gmail's "
"[Drafts]."
msgstr ""

#: ../../GettingStarted.rst:614
msgid "Then, your .git/config should have [imap] sections."
msgstr ""

#: ../../GettingStarted.rst:632
msgid "For developers to work with git-svn"
msgstr ""

#: ../../GettingStarted.rst:634
msgid "To set up clone from which you can submit code using ``git-svn``, run:"
msgstr ""

#: ../../GettingStarted.rst:652 ../../GettingStarted.rst:666
msgid "Likewise for compiler-rt, libomp and test-suite."
msgstr ""

#: ../../GettingStarted.rst:654
msgid ""
"To update this clone without generating git-svn tags that conflict with "
"the upstream Git repo, run:"
msgstr ""

#: ../../GettingStarted.rst:668
msgid ""
"This leaves your working directories on their master branches, so you'll "
"need to ``checkout`` each working branch individually and ``rebase`` it "
"on top of its parent branch."
msgstr ""

#: ../../GettingStarted.rst:672
msgid ""
"For those who wish to be able to update an llvm repo/revert patches "
"easily using git-svn, please look in the directory for the scripts ``git-"
"svnup`` and ``git-svnrevert``."
msgstr ""

#: ../../GettingStarted.rst:676
msgid ""
"To perform the aforementioned update steps go into your source directory "
"and just type ``git-svnup`` or ``git svnup`` and everything will just "
"work."
msgstr ""

#: ../../GettingStarted.rst:679
msgid ""
"If one wishes to revert a commit with git-svn, but do not want the git "
"hash to escape into the commit message, one can use the script ``git-"
"svnrevert`` or ``git svnrevert`` which will take in the git hash for the "
"commit you want to revert, look up the appropriate svn revision, and "
"output a message where all references to the git hash have been replaced "
"with the svn revision."
msgstr ""

#: ../../GettingStarted.rst:685
msgid "To commit back changes via git-svn, use ``git svn dcommit``:"
msgstr ""

#: ../../GettingStarted.rst:691
msgid ""
"Note that git-svn will create one SVN commit for each Git commit you have"
" pending, so squash and edit each commit before executing ``dcommit`` to "
"make sure they all conform to the coding standards and the developers' "
"policy."
msgstr ""

#: ../../GettingStarted.rst:695
msgid ""
"On success, ``dcommit`` will rebase against the HEAD of SVN, so to avoid "
"conflict, please make sure your current branch is up-to-date (via "
"fetch/rebase) before proceeding."
msgstr ""

#: ../../GettingStarted.rst:699
msgid ""
"The git-svn metadata can get out of sync after you mess around with "
"branches and ``dcommit``. When that happens, ``git svn dcommit`` stops "
"working, complaining about files with uncommitted changes. The fix is to "
"rebuild the metadata:"
msgstr ""

#: ../../GettingStarted.rst:708
msgid ""
"Please, refer to the Git-SVN manual (``man git-svn``) for more "
"information."
msgstr ""

#: ../../GettingStarted.rst:711
msgid "Local LLVM Configuration"
msgstr ""

#: ../../GettingStarted.rst:713
msgid ""
"Once checked out from the Subversion repository, the LLVM suite source "
"code must be configured before being built. For instructions using "
"autotools please see `Building LLVM With Autotools "
"<BuildingLLVMWithAutotools.html>`_. The recommended process uses CMake. "
"Unlinke the normal ``configure`` script, CMake generates the build files "
"in whatever format you request as well as various ``*.inc`` files, and "
"``llvm/include/Config/config.h``."
msgstr ""

#: ../../GettingStarted.rst:720
msgid ""
"Variables are passed to ``cmake`` on the command line using the format "
"``-D<variable name>=<value>``. The following variables are some common "
"options used by people developing LLVM."
msgstr ""

#: ../../GettingStarted.rst:725
msgid "Variable"
msgstr ""

#: ../../GettingStarted.rst:725
msgid "Purpose"
msgstr ""

#: ../../GettingStarted.rst:727
msgid "CMAKE_C_COMPILER"
msgstr ""

#: ../../GettingStarted.rst:727
msgid ""
"Tells ``cmake`` which C compiler to use. By default, this will be "
"/usr/bin/cc."
msgstr ""

#: ../../GettingStarted.rst:730
msgid "CMAKE_CXX_COMPILER"
msgstr ""

#: ../../GettingStarted.rst:730
msgid ""
"Tells ``cmake`` which C++ compiler to use. By default, this will be "
"/usr/bin/c++."
msgstr ""

#: ../../GettingStarted.rst:733
msgid "CMAKE_BUILD_TYPE"
msgstr ""

#: ../../GettingStarted.rst:733
msgid ""
"Tells ``cmake`` what type of build you are trying to generate files for. "
"Valid options are Debug, Release, RelWithDebInfo, and MinSizeRel. Default"
" is Debug."
msgstr ""

#: ../../GettingStarted.rst:738
msgid "CMAKE_INSTALL_PREFIX"
msgstr ""

#: ../../GettingStarted.rst:738
msgid ""
"Specifies the install directory to target when running the install action"
" of the build files."
msgstr ""

#: ../../GettingStarted.rst:741
msgid "LLVM_TARGETS_TO_BUILD"
msgstr ""

#: ../../GettingStarted.rst:741
msgid ""
"A semicolon delimited list controlling which targets will be built and "
"linked into llc. This is equivalent to the ``--enable-targets`` option in"
" the configure script. The default list is defined as "
"``LLVM_ALL_TARGETS``, and can be set to include out-of-tree targets. The "
"default value includes: ``AArch64, AMDGPU, ARM, BPF, CppBackend, Hexagon,"
" Mips, MSP430, NVPTX, PowerPC, Sparc, SystemZ X86, XCore``."
msgstr ""

#: ../../GettingStarted.rst:751
msgid "LLVM_ENABLE_DOXYGEN"
msgstr ""

#: ../../GettingStarted.rst:751
msgid ""
"Build doxygen-based documentation from the source code This is disabled "
"by default because it is slow and generates a lot of output."
msgstr ""

#: ../../GettingStarted.rst:755
msgid "LLVM_ENABLE_SPHINX"
msgstr ""

#: ../../GettingStarted.rst:755
msgid ""
"Build sphinx-based documentation from the source code. This is disabled "
"by default because it is slow and generates a lot of output."
msgstr ""

#: ../../GettingStarted.rst:759
msgid "LLVM_BUILD_LLVM_DYLIB"
msgstr ""

#: ../../GettingStarted.rst:759
msgid ""
"Generate libLLVM.so. This library contains a default set of LLVM "
"components that can be overridden with ``LLVM_DYLIB_COMPONENTS``. The "
"default contains most of LLVM and is defined in ``tools/llvm-"
"shlib/CMakelists.txt``."
msgstr ""

#: ../../GettingStarted.rst:765
msgid "LLVM_OPTIMIZED_TABLEGEN"
msgstr ""

#: ../../GettingStarted.rst:765
msgid ""
"Builds a release tablegen that gets used during the LLVM build. This can "
"dramatically speed up debug builds."
msgstr ""

#: ../../GettingStarted.rst:770
msgid "To configure LLVM, follow these steps:"
msgstr ""

#: ../../GettingStarted.rst:772
msgid "Change directory into the object root directory:"
msgstr ""

#: ../../GettingStarted.rst:778
msgid "Run the ``cmake``:"
msgstr ""

#: ../../GettingStarted.rst:786
msgid "Compiling the LLVM Suite Source Code"
msgstr ""

#: ../../GettingStarted.rst:788
msgid ""
"Unlike with autotools, with CMake your build type is defined at "
"configuration. If you want to change your build type, you can re-run "
"cmake with the following invocation:"
msgstr ""

#: ../../GettingStarted.rst:796
msgid ""
"Between runs, CMake preserves the values set for all options. CMake has "
"the following build types defined:"
msgstr ""

#: ../../GettingStarted.rst:799
msgid "Debug"
msgstr ""

#: ../../GettingStarted.rst:801
msgid ""
"These builds are the default. The build system will compile the tools and"
" libraries unoptimized, with debugging information, and asserts enabled."
msgstr ""

#: ../../GettingStarted.rst:804
msgid "Release"
msgstr ""

#: ../../GettingStarted.rst:806
msgid ""
"For these builds, the build system will compile the tools and libraries "
"with optimizations enabled and not generate debug info. CMakes default "
"optimization level is -O3. This can be configured by setting the "
"``CMAKE_CXX_FLAGS_RELEASE`` variable on the CMake command line."
msgstr ""

#: ../../GettingStarted.rst:811
msgid "RelWithDebInfo"
msgstr ""

#: ../../GettingStarted.rst:813
msgid ""
"These builds are useful when debugging. They generate optimized binaries "
"with debug information. CMakes default optimization level is -O2. This "
"can be configured by setting the ``CMAKE_CXX_FLAGS_RELWITHDEBINFO`` "
"variable on the CMake command line."
msgstr ""

#: ../../GettingStarted.rst:818
msgid ""
"Once you have LLVM configured, you can build it by entering the "
"*OBJ_ROOT* directory and issuing the following command:"
msgstr ""

#: ../../GettingStarted.rst:825
msgid ""
"If the build fails, please `check here`_ to see if you are using a "
"version of GCC that is known not to compile LLVM."
msgstr ""

#: ../../GettingStarted.rst:828
msgid ""
"If you have multiple processors in your machine, you may wish to use some"
" of the parallel build options provided by GNU Make.  For example, you "
"could use the command:"
msgstr ""

#: ../../GettingStarted.rst:836
msgid ""
"There are several special targets which are useful when working with the "
"LLVM source code:"
msgstr ""

#: ../../GettingStarted.rst:839
msgid "``make clean``"
msgstr ""

#: ../../GettingStarted.rst:841
msgid ""
"Removes all files generated by the build.  This includes object files, "
"generated C/C++ files, libraries, and executables."
msgstr ""

#: ../../GettingStarted.rst:844
msgid "``make install``"
msgstr ""

#: ../../GettingStarted.rst:846
msgid ""
"Installs LLVM header files, libraries, tools, and documentation in a "
"hierarchy under ``$PREFIX``, specified with ``CMAKE_INSTALL_PREFIX``, "
"which defaults to ``/usr/local``."
msgstr ""

#: ../../GettingStarted.rst:850
msgid "``make docs-llvm-html``"
msgstr ""

#: ../../GettingStarted.rst:852
msgid ""
"If configured with ``-DLLVM_ENABLE_SPHINX=On``, this will generate a "
"directory at ``OBJ_ROOT/docs/html`` which contains the HTML formatted "
"documentation."
msgstr ""

#: ../../GettingStarted.rst:856
msgid "Cross-Compiling LLVM"
msgstr ""

#: ../../GettingStarted.rst:858
msgid ""
"It is possible to cross-compile LLVM itself. That is, you can create LLVM"
" executables and libraries to be hosted on a platform different from the "
"platform where they are built (a Canadian Cross build). To generate build"
" files for cross-compiling CMake provides a variable "
"``CMAKE_TOOLCHAIN_FILE`` which can define compiler flags and variables "
"used during the CMake test operations."
msgstr ""

#: ../../GettingStarted.rst:864
msgid ""
"The result of such a build is executables that are not runnable on on the"
" build host but can be executed on the target. As an example the "
"following CMake invocation can generate build files targeting iOS. This "
"will work on Mac OS X with the latest Xcode:"
msgstr ""

#: ../../GettingStarted.rst:877
msgid ""
"Note: There are some additional flags that need to be passed when "
"building for iOS due to limitations in the iOS SDK."
msgstr ""

#: ../../GettingStarted.rst:880
msgid ""
"Check :doc:`HowToCrossCompileLLVM` and `Clang docs on how to cross-"
"compile in general <http://clang.llvm.org/docs/CrossCompilation.html>`_ "
"for more information about cross-compiling."
msgstr ""

#: ../../GettingStarted.rst:885
msgid "The Location of LLVM Object Files"
msgstr ""

#: ../../GettingStarted.rst:887
msgid ""
"The LLVM build system is capable of sharing a single LLVM source tree "
"among several LLVM builds.  Hence, it is possible to build LLVM for "
"several different platforms or configurations using the same source tree."
msgstr ""

#: ../../GettingStarted.rst:891
msgid "This is accomplished in the typical autoconf manner:"
msgstr ""

#: ../../GettingStarted.rst:893
msgid "Change directory to where the LLVM object files should live:"
msgstr ""

#: ../../GettingStarted.rst:899
msgid "Run ``cmake``:"
msgstr ""

#: ../../GettingStarted.rst:905
msgid ""
"The LLVM build will create a structure underneath *OBJ_ROOT* that matches"
" the LLVM source tree. At each level where source files are present in "
"the source tree there will be a corresponding ``CMakeFiles`` directory in"
" the *OBJ_ROOT*. Underneath that directory there is another directory "
"with a name ending in ``.dir`` under which you'll find object files for "
"each source."
msgstr ""

#: ../../GettingStarted.rst:911
msgid "For example:"
msgstr ""

#: ../../GettingStarted.rst:920
msgid "Optional Configuration Items"
msgstr ""

#: ../../GettingStarted.rst:922
msgid ""
"If you're running on a Linux system that supports the `binfmt_misc "
"<http://en.wikipedia.org/wiki/binfmt_misc>`_ module, and you have root "
"access on the system, you can set your system up to execute LLVM bitcode "
"files directly. To do this, use commands like this (the first command may"
" not be required if you are already using the module):"
msgstr ""

#: ../../GettingStarted.rst:935
msgid ""
"This allows you to execute LLVM bitcode files directly.  On Debian, you "
"can also use this command instead of the 'echo' command above:"
msgstr ""

#: ../../GettingStarted.rst:946
msgid "Program Layout"
msgstr ""

#: ../../GettingStarted.rst:948
msgid ""
"One useful source of information about the LLVM source base is the LLVM "
"`doxygen <http://www.doxygen.org/>`_ documentation available at "
"`<http://llvm.org/doxygen/>`_.  The following is a brief introduction to "
"code layout:"
msgstr ""

#: ../../GettingStarted.rst:954
msgid "``llvm/examples``"
msgstr ""

#: ../../GettingStarted.rst:956
msgid ""
"This directory contains some simple examples of how to use the LLVM IR "
"and JIT."
msgstr ""

#: ../../GettingStarted.rst:959
msgid "``llvm/include``"
msgstr ""

#: ../../GettingStarted.rst:961
msgid ""
"This directory contains public header files exported from the LLVM "
"library. The three main subdirectories of this directory are:"
msgstr ""

#: ../../GettingStarted.rst:964
msgid "``llvm/include/llvm``"
msgstr ""

#: ../../GettingStarted.rst:966
msgid ""
"This directory contains all of the LLVM specific header files.  This "
"directory also has subdirectories for different portions of LLVM: "
"``Analysis``, ``CodeGen``, ``Target``, ``Transforms``, etc..."
msgstr ""

#: ../../GettingStarted.rst:970
msgid "``llvm/include/llvm/Support``"
msgstr ""

#: ../../GettingStarted.rst:972
msgid ""
"This directory contains generic support libraries that are provided with "
"LLVM but not necessarily specific to LLVM. For example, some C++ STL "
"utilities and a Command Line option processing library store their header"
" files here."
msgstr ""

#: ../../GettingStarted.rst:976
msgid "``llvm/include/llvm/Config``"
msgstr ""

#: ../../GettingStarted.rst:978
msgid ""
"This directory contains header files configured by the ``configure`` "
"script. They wrap \"standard\" UNIX and C header files.  Source code can "
"include these header files which automatically take care of the "
"conditional #includes that the ``configure`` script generates."
msgstr ""

#: ../../GettingStarted.rst:984
msgid "``llvm/lib``"
msgstr ""

#: ../../GettingStarted.rst:986
msgid ""
"This directory contains most of the source files of the LLVM system. In "
"LLVM, almost all code exists in libraries, making it very easy to share "
"code among the different `tools`_."
msgstr ""

#: ../../GettingStarted.rst:990
msgid "``llvm/lib/IR/``"
msgstr ""

#: ../../GettingStarted.rst:992
msgid ""
"This directory holds the core LLVM source files that implement core "
"classes like Instruction and BasicBlock."
msgstr ""

#: ../../GettingStarted.rst:995
msgid "``llvm/lib/AsmParser/``"
msgstr ""

#: ../../GettingStarted.rst:997
msgid ""
"This directory holds the source code for the LLVM assembly language "
"parser library."
msgstr ""

#: ../../GettingStarted.rst:1000
msgid "``llvm/lib/Bitcode/``"
msgstr ""

#: ../../GettingStarted.rst:1002
msgid "This directory holds code for reading and write LLVM bitcode."
msgstr ""

#: ../../GettingStarted.rst:1004
msgid "``llvm/lib/Analysis/``"
msgstr ""

#: ../../GettingStarted.rst:1006
msgid ""
"This directory contains a variety of different program analyses, such as "
"Dominator Information, Call Graphs, Induction Variables, Interval "
"Identification, Natural Loop Identification, etc."
msgstr ""

#: ../../GettingStarted.rst:1010
msgid "``llvm/lib/Transforms/``"
msgstr ""

#: ../../GettingStarted.rst:1012
msgid ""
"This directory contains the source code for the LLVM to LLVM program "
"transformations, such as Aggressive Dead Code Elimination, Sparse "
"Conditional Constant Propagation, Inlining, Loop Invariant Code Motion, "
"Dead Global Elimination, and many others."
msgstr ""

#: ../../GettingStarted.rst:1017
msgid "``llvm/lib/Target/``"
msgstr ""

#: ../../GettingStarted.rst:1019
msgid ""
"This directory contains files that describe various target architectures "
"for code generation.  For example, the ``llvm/lib/Target/X86`` directory "
"holds the X86 machine description while ``llvm/lib/Target/ARM`` "
"implements the ARM backend."
msgstr ""

#: ../../GettingStarted.rst:1024
msgid "``llvm/lib/CodeGen/``"
msgstr ""

#: ../../GettingStarted.rst:1026
msgid ""
"This directory contains the major parts of the code generator: "
"Instruction Selector, Instruction Scheduling, and Register Allocation."
msgstr ""

#: ../../GettingStarted.rst:1029
msgid "``llvm/lib/MC/``"
msgstr ""

#: ../../GettingStarted.rst:1031
msgid "(FIXME: T.B.D.)"
msgstr ""

#: ../../GettingStarted.rst:1033
msgid "``llvm/lib/Debugger/``"
msgstr ""

#: ../../GettingStarted.rst:1035
msgid ""
"This directory contains the source level debugger library that makes it "
"possible to instrument LLVM programs so that a debugger could identify "
"source code locations at which the program is executing."
msgstr ""

#: ../../GettingStarted.rst:1039
msgid "``llvm/lib/ExecutionEngine/``"
msgstr ""

#: ../../GettingStarted.rst:1041
msgid ""
"This directory contains libraries for executing LLVM bitcode directly at "
"runtime in both interpreted and JIT compiled fashions."
msgstr ""

#: ../../GettingStarted.rst:1044
msgid "``llvm/lib/Support/``"
msgstr ""

#: ../../GettingStarted.rst:1046
msgid ""
"This directory contains the source code that corresponds to the header "
"files located in ``llvm/include/ADT/`` and ``llvm/include/Support/``."
msgstr ""

#: ../../GettingStarted.rst:1050
msgid "``llvm/projects``"
msgstr ""

#: ../../GettingStarted.rst:1052
msgid ""
"This directory contains projects that are not strictly part of LLVM but "
"are shipped with LLVM. This is also the directory where you should create"
" your own LLVM-based projects."
msgstr ""

#: ../../GettingStarted.rst:1057
msgid "``llvm/runtime``"
msgstr ""

#: ../../GettingStarted.rst:1059
msgid ""
"This directory contains libraries which are compiled into LLVM bitcode "
"and used when linking programs with the Clang front end.  Most of these "
"libraries are skeleton versions of real libraries; for example, libc is a"
" stripped down version of glibc."
msgstr ""

#: ../../GettingStarted.rst:1064
msgid ""
"Unlike the rest of the LLVM suite, this directory needs the LLVM GCC "
"front end to compile."
msgstr ""

#: ../../GettingStarted.rst:1068
msgid "``llvm/test``"
msgstr ""

#: ../../GettingStarted.rst:1070
msgid ""
"This directory contains feature and regression tests and other basic "
"sanity checks on the LLVM infrastructure. These are intended to run "
"quickly and cover a lot of territory without being exhaustive."
msgstr ""

#: ../../GettingStarted.rst:1075
msgid "``test-suite``"
msgstr ""

#: ../../GettingStarted.rst:1077
msgid ""
"This is not a directory in the normal llvm module; it is a separate "
"Subversion module that must be checked out (usually to ``projects/test-"
"suite``).  This module contains a comprehensive correctness, performance,"
" and benchmarking test suite for LLVM. It is a separate Subversion module"
" because not every LLVM user is interested in downloading or building "
"such a comprehensive test suite. For further details on this test suite, "
"please see the :doc:`Testing Guide <TestingGuide>` document."
msgstr ""

#: ../../GettingStarted.rst:1088
msgid "``llvm/tools``"
msgstr ""

#: ../../GettingStarted.rst:1090
msgid ""
"The **tools** directory contains the executables built out of the "
"libraries above, which form the main part of the user interface.  You can"
" always get help for a tool by typing ``tool_name -help``.  The following"
" is a brief introduction to the most important tools.  More detailed "
"information is in the `Command Guide <CommandGuide/index.html>`_."
msgstr ""

#: ../../GettingStarted.rst:1096
msgid "``bugpoint``"
msgstr ""

#: ../../GettingStarted.rst:1098
msgid ""
"``bugpoint`` is used to debug optimization passes or code generation "
"backends by narrowing down the given test case to the minimum number of "
"passes and/or instructions that still cause a problem, whether it is a "
"crash or miscompilation. See `<HowToSubmitABug.html>`_ for more "
"information on using ``bugpoint``."
msgstr ""

#: ../../GettingStarted.rst:1104
msgid "``llvm-ar``"
msgstr ""

#: ../../GettingStarted.rst:1106
msgid ""
"The archiver produces an archive containing the given LLVM bitcode files,"
" optionally with an index for faster lookup."
msgstr ""

#: ../../GettingStarted.rst:1109
msgid "``llvm-as``"
msgstr ""

#: ../../GettingStarted.rst:1111
msgid "The assembler transforms the human readable LLVM assembly to LLVM bitcode."
msgstr ""

#: ../../GettingStarted.rst:1113
msgid "``llvm-dis``"
msgstr ""

#: ../../GettingStarted.rst:1115
msgid ""
"The disassembler transforms the LLVM bitcode to human readable LLVM "
"assembly."
msgstr ""

#: ../../GettingStarted.rst:1117
msgid "``llvm-link``"
msgstr ""

#: ../../GettingStarted.rst:1119
msgid ""
"``llvm-link``, not surprisingly, links multiple LLVM modules into a "
"single program."
msgstr ""

#: ../../GettingStarted.rst:1122
msgid "``lli``"
msgstr ""

#: ../../GettingStarted.rst:1124
msgid ""
"``lli`` is the LLVM interpreter, which can directly execute LLVM bitcode "
"(although very slowly...). For architectures that support it (currently "
"x86, Sparc, and PowerPC), by default, ``lli`` will function as a Just-In-"
"Time compiler (if the functionality was compiled in), and will execute "
"the code *much* faster than the interpreter."
msgstr ""

#: ../../GettingStarted.rst:1130
msgid "``llc``"
msgstr ""

#: ../../GettingStarted.rst:1132
msgid ""
"``llc`` is the LLVM backend compiler, which translates LLVM bitcode to a "
"native code assembly file or to C code (with the ``-march=c`` option)."
msgstr ""

#: ../../GettingStarted.rst:1135
msgid "``opt``"
msgstr ""

#: ../../GettingStarted.rst:1137
msgid ""
"``opt`` reads LLVM bitcode, applies a series of LLVM to LLVM "
"transformations (which are specified on the command line), and then "
"outputs the resultant bitcode.  The '``opt -help``' command is a good way"
" to get a list of the program transformations available in LLVM."
msgstr ""

#: ../../GettingStarted.rst:1142
msgid ""
"``opt`` can also be used to run a specific analysis on an input LLVM "
"bitcode file and print out the results.  It is primarily useful for "
"debugging analyses, or familiarizing yourself with what an analysis does."
msgstr ""

#: ../../GettingStarted.rst:1147
msgid "``llvm/utils``"
msgstr ""

#: ../../GettingStarted.rst:1149
msgid ""
"This directory contains utilities for working with LLVM source code, and "
"some of the utilities are actually required as part of the build process "
"because they are code generators for parts of LLVM infrastructure."
msgstr ""

#: ../../GettingStarted.rst:1154
msgid "``codegen-diff``"
msgstr ""

#: ../../GettingStarted.rst:1156
msgid ""
"``codegen-diff`` is a script that finds differences between code that LLC"
" generates and code that LLI generates. This is a useful tool if you are "
"debugging one of them, assuming that the other generates correct output. "
"For the full user manual, run ```perldoc codegen-diff'``."
msgstr ""

#: ../../GettingStarted.rst:1161
msgid "``emacs/``"
msgstr ""

#: ../../GettingStarted.rst:1163
msgid ""
"The ``emacs`` directory contains syntax-highlighting files which will "
"work with Emacs and XEmacs editors, providing syntax highlighting support"
" for LLVM assembly files and TableGen description files. For information "
"on how to use the syntax files, consult the ``README`` file in that "
"directory."
msgstr ""

#: ../../GettingStarted.rst:1168
msgid "``getsrcs.sh``"
msgstr ""

#: ../../GettingStarted.rst:1170
msgid ""
"The ``getsrcs.sh`` script finds and outputs all non-generated source "
"files, which is useful if one wishes to do a lot of development across "
"directories and does not want to individually find each file. One way to "
"use it is to run, for example: ``xemacs `utils/getsources.sh``` from the "
"top of your LLVM source tree."
msgstr ""

#: ../../GettingStarted.rst:1176
msgid "``llvmgrep``"
msgstr ""

#: ../../GettingStarted.rst:1178
msgid ""
"This little tool performs an ``egrep -H -n`` on each source file in LLVM "
"and passes to it a regular expression provided on ``llvmgrep``'s command "
"line. This is a very efficient way of searching the source base for a "
"particular regular expression."
msgstr ""

#: ../../GettingStarted.rst:1183
msgid "``makellvm``"
msgstr ""

#: ../../GettingStarted.rst:1185
msgid ""
"The ``makellvm`` script compiles all files in the current directory and "
"then compiles and links the tool that is the first argument. For example,"
" assuming you are in the directory ``llvm/lib/Target/Sparc``, if "
"``makellvm`` is in your path, simply running ``makellvm llc`` will make a"
" build of the current directory, switch to directory ``llvm/tools/llc`` "
"and build it, causing a re-linking of LLC."
msgstr ""

#: ../../GettingStarted.rst:1192
msgid "``TableGen/``"
msgstr ""

#: ../../GettingStarted.rst:1194
msgid ""
"The ``TableGen`` directory contains the tool used to generate register "
"descriptions, instruction set descriptions, and even assemblers from "
"common TableGen description files."
msgstr ""

#: ../../GettingStarted.rst:1198
msgid "``vim/``"
msgstr ""

#: ../../GettingStarted.rst:1200
msgid ""
"The ``vim`` directory contains syntax-highlighting files which will work "
"with the VIM editor, providing syntax highlighting support for LLVM "
"assembly files and TableGen description files. For information on how to "
"use the syntax files, consult the ``README`` file in that directory."
msgstr ""

#: ../../GettingStarted.rst:1208
msgid "An Example Using the LLVM Tool Chain"
msgstr ""

#: ../../GettingStarted.rst:1210
msgid "This section gives an example of using LLVM with the Clang front end."
msgstr ""

#: ../../GettingStarted.rst:1213
msgid "Example with clang"
msgstr ""

#: ../../GettingStarted.rst:1215
msgid "First, create a simple C file, name it 'hello.c':"
msgstr ""

#: ../../GettingStarted.rst:1226
msgid "Next, compile the C file into a native executable:"
msgstr ""

#: ../../GettingStarted.rst:1234
msgid ""
"Clang works just like GCC by default.  The standard -S and -c arguments "
"work as usual (producing a native .s or .o file, respectively)."
msgstr ""

#: ../../GettingStarted.rst:1237
msgid "Next, compile the C file into an LLVM bitcode file:"
msgstr ""

#: ../../GettingStarted.rst:1243
msgid ""
"The -emit-llvm option can be used with the -S or -c options to emit an "
"LLVM ``.ll`` or ``.bc`` file (respectively) for the code.  This allows "
"you to use the `standard LLVM tools <CommandGuide/index.html>`_ on the "
"bitcode file."
msgstr ""

#: ../../GettingStarted.rst:1247
msgid "Run the program in both forms. To run the program, use:"
msgstr ""

#: ../../GettingStarted.rst:1253
msgid "and"
msgstr ""

#: ../../GettingStarted.rst:1259
msgid ""
"The second examples shows how to invoke the LLVM JIT, :doc:`lli "
"<CommandGuide/lli>`."
msgstr ""

#: ../../GettingStarted.rst:1262
msgid "Use the ``llvm-dis`` utility to take a look at the LLVM assembly code:"
msgstr ""

#: ../../GettingStarted.rst:1268
msgid "Compile the program to native assembly using the LLC code generator:"
msgstr ""

#: ../../GettingStarted.rst:1274
msgid "Assemble the native assembly language file into a program:"
msgstr ""

#: ../../GettingStarted.rst:1282
msgid "Execute the native code program:"
msgstr ""

#: ../../GettingStarted.rst:1288
msgid ""
"Note that using clang to compile directly to native code (i.e. when the "
"``-emit-llvm`` option is not present) does steps 6/7/8 for you."
msgstr ""

#: ../../GettingStarted.rst:1292
msgid "Common Problems"
msgstr ""

#: ../../GettingStarted.rst:1294
msgid ""
"If you are having problems building or using LLVM, or if you have any "
"other general questions about LLVM, please consult the `Frequently Asked "
"Questions <FAQ.html>`_ page."
msgstr ""

#: ../../GettingStarted.rst:1301
msgid "Links"
msgstr ""

#: ../../GettingStarted.rst:1303
msgid ""
"This document is just an **introduction** on how to use LLVM to do some "
"simple things... there are many more interesting and complicated things "
"that you can do that aren't documented here (but we'll gladly accept a "
"patch if you want to write something up!).  For more information about "
"LLVM, check out:"
msgstr ""

#: ../../GettingStarted.rst:1308
msgid "`LLVM Homepage <http://llvm.org/>`_"
msgstr ""

#: ../../GettingStarted.rst:1309
msgid "`LLVM Doxygen Tree <http://llvm.org/doxygen/>`_"
msgstr ""

#: ../../GettingStarted.rst:1310
msgid "`Starting a Project that Uses LLVM <http://llvm.org/docs/Projects.html>`_"
msgstr ""

