# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../HowToReleaseLLVM.rst:3
msgid "How To Release LLVM To The Public"
msgstr "如何发布LLVM"

#: ../../HowToReleaseLLVM.rst:10
msgid "Introduction"
msgstr ""

#: ../../HowToReleaseLLVM.rst:12
msgid ""
"This document contains information about successfully releasing LLVM --- "
"including subprojects: e.g., ``clang`` and ``dragonegg`` --- to the "
"public.  It is the Release Manager's responsibility to ensure that a high"
" quality build of LLVM is released."
msgstr ""

#: ../../HowToReleaseLLVM.rst:17
msgid ""
"If you're looking for the document on how to test the release candidates "
"and create the binary packages, please refer to the :doc:`ReleaseProcess`"
" instead."
msgstr ""

#: ../../HowToReleaseLLVM.rst:23
msgid "Release Timeline"
msgstr ""

#: ../../HowToReleaseLLVM.rst:25
msgid ""
"LLVM is released on a time based schedule --- with major releases roughly"
" every 6 months.  In between major releases there may be dot releases. "
"The release manager will determine if and when to make a dot release "
"based on feedback from the community.  Typically, dot releases should be "
"made if there are large number of bug-fixes in the stable branch or a "
"critical bug has been discovered that affects a large number of users."
msgstr ""

#: ../../HowToReleaseLLVM.rst:32
msgid ""
"Unless otherwise stated, dot releases will follow the same procedure as "
"major releases."
msgstr ""

#: ../../HowToReleaseLLVM.rst:35
msgid "The release process is roughly as follows:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:37
msgid ""
"Set code freeze and branch creation date for 6 months after last code "
"freeze date.  Announce release schedule to the LLVM community and update "
"the website."
msgstr ""

#: ../../HowToReleaseLLVM.rst:40
msgid "Create release branch and begin release process."
msgstr ""

#: ../../HowToReleaseLLVM.rst:42
msgid ""
"Send out release candidate sources for first round of testing.  Testing "
"lasts 7-10 days.  During the first round of testing, any regressions "
"found should be fixed.  Patches are merged from mainline into the release"
" branch.  Also, all features need to be completed during this time.  Any "
"features not completed at the end of the first round of testing will be "
"removed or disabled for the release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:49
msgid ""
"Generate and send out the second release candidate sources.  Only "
"*critial* bugs found during this testing phase will be fixed.  Any bugs "
"introduced by merged patches will be fixed.  If so a third round of "
"testing is needed."
msgstr ""

#: ../../HowToReleaseLLVM.rst:53
msgid "The release notes are updated."
msgstr ""

#: ../../HowToReleaseLLVM.rst:55
msgid "Finally, release!"
msgstr ""

#: ../../HowToReleaseLLVM.rst:57
msgid ""
"The release process will be accelerated for dot releases.  If the first "
"round of testing finds no critical bugs and no regressions since the last"
" major release, then additional rounds of testing will not be required."
msgstr ""

#: ../../HowToReleaseLLVM.rst:62
msgid "Release Process"
msgstr ""

#: ../../HowToReleaseLLVM.rst:68
msgid "Release Administrative Tasks"
msgstr ""

#: ../../HowToReleaseLLVM.rst:70
msgid ""
"This section describes a few administrative tasks that need to be done "
"for the release process to begin.  Specifically, it involves:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:73
msgid "Creating the release branch,"
msgstr ""

#: ../../HowToReleaseLLVM.rst:75
msgid "Setting version numbers, and"
msgstr ""

#: ../../HowToReleaseLLVM.rst:77
msgid "Tagging release candidates for the release team to begin testing."
msgstr ""

#: ../../HowToReleaseLLVM.rst:80
msgid "Create Release Branch"
msgstr ""

#: ../../HowToReleaseLLVM.rst:82
msgid "Branch the Subversion trunk using the following procedure:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:84
msgid ""
"Remind developers that the release branching is imminent and to refrain "
"from committing patches that might break the build.  E.g., new features, "
"large patches for works in progress, an overhaul of the type system, an "
"exciting new TableGen feature, etc."
msgstr ""

#: ../../HowToReleaseLLVM.rst:89
msgid ""
"Verify that the current Subversion trunk is in decent shape by examining "
"nightly tester and buildbot results."
msgstr ""

#: ../../HowToReleaseLLVM.rst:92
msgid ""
"Create the release branch for ``llvm``, ``clang``, the ``test-suite``, "
"and ``dragonegg`` from the last known good revision.  The branch's name "
"is ``release_XY``, where ``X`` is the major and ``Y`` the minor release "
"numbers.  The branches should be created using the following commands:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:111
msgid ""
"Advise developers that they may now check their patches into the "
"Subversion tree again."
msgstr ""

#: ../../HowToReleaseLLVM.rst:114
msgid ""
"The Release Manager should switch to the release branch, because all "
"changes to the release will now be done in the branch.  The easiest way "
"to do this is to grab a working copy using the following commands:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:129
msgid "Update LLVM Version"
msgstr ""

#: ../../HowToReleaseLLVM.rst:131
msgid ""
"After creating the LLVM release branch, update the release branches' "
"``autoconf`` and ``configure.ac`` versions from '``X.Ysvn``' to "
"'``X.Y``'. Update it on mainline as well to be the next version "
"('``X.Y+1svn``'). Regenerate the configure scripts for both ``llvm`` and "
"the ``test-suite``."
msgstr ""

#: ../../HowToReleaseLLVM.rst:136
msgid ""
"In addition, the version numbers of all the Bugzilla components must be "
"updated for the next release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:140
msgid "Tagging the LLVM Release Candidates"
msgstr ""

#: ../../HowToReleaseLLVM.rst:142
msgid "Tag release candidates using the tag.sh script in utils/release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:148
msgid ""
"The Release Manager may supply pre-packaged source tarballs for users.  "
"This can be done with the export.sh script in utils/release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:155
msgid ""
"This will generate source tarballs for each LLVM project being validated,"
" which can be uploaded to the website for further testing."
msgstr ""

#: ../../HowToReleaseLLVM.rst:159
msgid "Building the Release"
msgstr ""

#: ../../HowToReleaseLLVM.rst:161
msgid ""
"The builds of ``llvm``, ``clang``, and ``dragonegg`` *must* be free of "
"errors and warnings in Debug, Release+Asserts, and Release builds.  If "
"all builds are clean, then the release passes Build Qualification."
msgstr ""

#: ../../HowToReleaseLLVM.rst:165
msgid "The ``make`` options for building the different modes:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:168
msgid "Mode"
msgstr ""

#: ../../HowToReleaseLLVM.rst:168
msgid "Options"
msgstr ""

#: ../../HowToReleaseLLVM.rst:170
msgid "Debug"
msgstr ""

#: ../../HowToReleaseLLVM.rst:170
msgid "``ENABLE_OPTIMIZED=0``"
msgstr ""

#: ../../HowToReleaseLLVM.rst:172
msgid "Release+Asserts"
msgstr ""

#: ../../HowToReleaseLLVM.rst:172
msgid "``ENABLE_OPTIMIZED=1``"
msgstr ""

#: ../../HowToReleaseLLVM.rst:174
msgid "Release"
msgstr ""

#: ../../HowToReleaseLLVM.rst:174
msgid "``ENABLE_OPTIMIZED=1 DISABLE_ASSERTIONS=1``"
msgstr ""

#: ../../HowToReleaseLLVM.rst:178
msgid "Build LLVM"
msgstr ""

#: ../../HowToReleaseLLVM.rst:180
msgid ""
"Build ``Debug``, ``Release+Asserts``, and ``Release`` versions of "
"``llvm`` on all supported platforms.  Directions to build ``llvm`` are "
":doc:`here <GettingStarted>`."
msgstr ""

#: ../../HowToReleaseLLVM.rst:185
msgid "Build Clang Binary Distribution"
msgstr ""

#: ../../HowToReleaseLLVM.rst:187
msgid ""
"Creating the ``clang`` binary distribution "
"(Debug/Release+Asserts/Release) requires performing the following steps "
"for each supported platform:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:190
msgid ""
"Build clang according to the directions `here "
"<http://clang.llvm.org/get_started.html>`__."
msgstr ""

#: ../../HowToReleaseLLVM.rst:193
msgid ""
"Build both a Debug and Release version of clang.  The binary will be the "
"Release build."
msgstr ""

#: ../../HowToReleaseLLVM.rst:196
msgid "Package ``clang`` (details to follow)."
msgstr ""

#: ../../HowToReleaseLLVM.rst:199
msgid "Target Specific Build Details"
msgstr ""

#: ../../HowToReleaseLLVM.rst:201
msgid ""
"The table below specifies which compilers are used for each Arch/OS "
"combination when qualifying the build of ``llvm``, ``clang``, and "
"``dragonegg``."
msgstr ""

#: ../../HowToReleaseLLVM.rst:205 ../../HowToReleaseLLVM.rst:259
msgid "Architecture"
msgstr ""

#: ../../HowToReleaseLLVM.rst:205 ../../HowToReleaseLLVM.rst:259
msgid "OS"
msgstr ""

#: ../../HowToReleaseLLVM.rst:205
msgid "compiler"
msgstr ""

#: ../../HowToReleaseLLVM.rst:207 ../../HowToReleaseLLVM.rst:209
#: ../../HowToReleaseLLVM.rst:211 ../../HowToReleaseLLVM.rst:213
#: ../../HowToReleaseLLVM.rst:261 ../../HowToReleaseLLVM.rst:265
#: ../../HowToReleaseLLVM.rst:269
msgid "x86-32"
msgstr ""

#: ../../HowToReleaseLLVM.rst:207 ../../HowToReleaseLLVM.rst:215
msgid "Mac OS 10.5"
msgstr ""

#: ../../HowToReleaseLLVM.rst:207 ../../HowToReleaseLLVM.rst:215
msgid "gcc 4.0.1"
msgstr ""

#: ../../HowToReleaseLLVM.rst:209 ../../HowToReleaseLLVM.rst:217
#: ../../HowToReleaseLLVM.rst:221 ../../HowToReleaseLLVM.rst:261
#: ../../HowToReleaseLLVM.rst:275 ../../HowToReleaseLLVM.rst:283
msgid "Linux"
msgstr ""

#: ../../HowToReleaseLLVM.rst:209 ../../HowToReleaseLLVM.rst:217
msgid "gcc 4.2.X, gcc 4.3.X"
msgstr ""

#: ../../HowToReleaseLLVM.rst:211 ../../HowToReleaseLLVM.rst:219
#: ../../HowToReleaseLLVM.rst:265 ../../HowToReleaseLLVM.rst:279
msgid "FreeBSD"
msgstr ""

#: ../../HowToReleaseLLVM.rst:211 ../../HowToReleaseLLVM.rst:219
msgid "gcc 4.2.X"
msgstr ""

#: ../../HowToReleaseLLVM.rst:213 ../../HowToReleaseLLVM.rst:269
msgid "mingw"
msgstr ""

#: ../../HowToReleaseLLVM.rst:213
msgid "gcc 3.4.5"
msgstr ""

#: ../../HowToReleaseLLVM.rst:215 ../../HowToReleaseLLVM.rst:217
#: ../../HowToReleaseLLVM.rst:219 ../../HowToReleaseLLVM.rst:271
#: ../../HowToReleaseLLVM.rst:275 ../../HowToReleaseLLVM.rst:279
msgid "x86-64"
msgstr ""

#: ../../HowToReleaseLLVM.rst:221
msgid "ARMv7"
msgstr ""

#: ../../HowToReleaseLLVM.rst:221
msgid "gcc 4.6.X, gcc 4.7.X"
msgstr ""

#: ../../HowToReleaseLLVM.rst:225
msgid "Release Qualification Criteria"
msgstr ""

#: ../../HowToReleaseLLVM.rst:227
msgid ""
"A release is qualified when it has no regressions from the previous "
"release (or baseline).  Regressions are related to correctness first and "
"performance second. (We may tolerate some minor performance regressions "
"if they are deemed necessary for the general quality of the compiler.)"
msgstr ""

#: ../../HowToReleaseLLVM.rst:232
msgid ""
"**Regressions are new failures in the set of tests that are used to "
"qualify each product and only include things on the list.  Every release "
"will have some bugs in it.  It is the reality of developing a complex "
"piece of software.  We need a very concrete and definitive release "
"criteria that ensures we have monotonically improving quality on some "
"metric.  The metric we use is described below.  This doesn't mean that we"
" don't care about other criteria, but these are the criteria which we "
"found to be most important and which must be satisfied before a release "
"can go out.**"
msgstr ""

#: ../../HowToReleaseLLVM.rst:242
msgid "Qualify LLVM"
msgstr ""

#: ../../HowToReleaseLLVM.rst:244
msgid ""
"LLVM is qualified when it has a clean test run without a front-end.  And "
"it has no regressions when using either ``clang`` or ``dragonegg`` with "
"the ``test-suite`` from the previous release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:249
msgid "Qualify Clang"
msgstr ""

#: ../../HowToReleaseLLVM.rst:251
msgid ""
"``Clang`` is qualified when front-end specific tests in the ``llvm`` "
"regression test suite all pass, clang's own test suite passes cleanly, "
"and there are no regressions in the ``test-suite``."
msgstr ""

#: ../../HowToReleaseLLVM.rst:256
msgid "Specific Target Qualification Details"
msgstr ""

#: ../../HowToReleaseLLVM.rst:259
msgid "clang baseline"
msgstr ""

#: ../../HowToReleaseLLVM.rst:259
msgid "tests"
msgstr ""

#: ../../HowToReleaseLLVM.rst:261 ../../HowToReleaseLLVM.rst:265
#: ../../HowToReleaseLLVM.rst:271 ../../HowToReleaseLLVM.rst:275
#: ../../HowToReleaseLLVM.rst:279 ../../HowToReleaseLLVM.rst:283
msgid "last release"
msgstr ""

#: ../../HowToReleaseLLVM.rst:261 ../../HowToReleaseLLVM.rst:271
#: ../../HowToReleaseLLVM.rst:275
msgid "llvm regression tests, clang regression tests, test-suite (including spec)"
msgstr ""

#: ../../HowToReleaseLLVM.rst:265 ../../HowToReleaseLLVM.rst:279
#: ../../HowToReleaseLLVM.rst:283
msgid "llvm regression tests, clang regression tests, test-suite"
msgstr ""

#: ../../HowToReleaseLLVM.rst:269
msgid "none"
msgstr ""

#: ../../HowToReleaseLLVM.rst:269
msgid "QT"
msgstr ""

#: ../../HowToReleaseLLVM.rst:271
msgid "Mac OS 10.X"
msgstr ""

#: ../../HowToReleaseLLVM.rst:283
msgid "ARMv7A"
msgstr ""

#: ../../HowToReleaseLLVM.rst:289
msgid "Community Testing"
msgstr ""

#: ../../HowToReleaseLLVM.rst:291
msgid ""
"Once all testing has been completed and appropriate bugs filed, the "
"release candidate tarballs are put on the website and the LLVM community "
"is notified. Ask that all LLVM developers test the release in 2 ways:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:295
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang`` "
"binary.  Build LLVM.  Run ``make check`` and the full LLVM test suite "
"(``make TEST=nightly report``)."
msgstr ""

#: ../../HowToReleaseLLVM.rst:299
msgid ""
"Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources.  "
"Compile everything.  Run ``make check`` and the full LLVM test suite "
"(``make TEST=nightly report``)."
msgstr ""

#: ../../HowToReleaseLLVM.rst:303
msgid ""
"Ask LLVM developers to submit the test suite report and ``make check`` "
"results to the list.  Verify that there are no regressions from the "
"previous release. The results are not used to qualify a release, but to "
"spot other potential problems.  For unsupported targets, verify that "
"``make check`` is at least clean."
msgstr ""

#: ../../HowToReleaseLLVM.rst:309
msgid ""
"During the first round of testing, all regressions must be fixed before "
"the second release candidate is tagged."
msgstr ""

#: ../../HowToReleaseLLVM.rst:312
msgid ""
"If this is the second round of testing, the testing is only to ensure "
"that bug fixes previously merged in have not created new major problems. "
"*This is not the time to solve additional and unrelated bugs!* If no "
"patches are merged in, the release is determined to be ready and the "
"release manager may move onto the next stage."
msgstr ""

#: ../../HowToReleaseLLVM.rst:319
msgid "Release Patch Rules"
msgstr ""

#: ../../HowToReleaseLLVM.rst:321
msgid "Below are the rules regarding patching the release branch:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:323
msgid ""
"Patches applied to the release branch may only be applied by the release "
"manager."
msgstr ""

#: ../../HowToReleaseLLVM.rst:326
msgid ""
"During the first round of testing, patches that fix regressions or that "
"are small and relatively risk free (verified by the appropriate code "
"owner) are applied to the branch.  Code owners are asked to be very "
"conservative in approving patches for the branch.  We reserve the right "
"to reject any patch that does not fix a regression as previously defined."
msgstr ""

#: ../../HowToReleaseLLVM.rst:332
msgid ""
"During the remaining rounds of testing, only patches that fix critical "
"regressions may be applied."
msgstr ""

#: ../../HowToReleaseLLVM.rst:335
msgid ""
"For dot releases all patches must mantain both API and ABI compatibility "
"with the previous major release.  Only bugfixes will be accepted."
msgstr ""

#: ../../HowToReleaseLLVM.rst:339
msgid "Release Final Tasks"
msgstr ""

#: ../../HowToReleaseLLVM.rst:341
msgid ""
"The final stages of the release process involves tagging the \"final\" "
"release branch, updating documentation that refers to the release, and "
"updating the demo page."
msgstr ""

#: ../../HowToReleaseLLVM.rst:346
msgid "Update Documentation"
msgstr ""

#: ../../HowToReleaseLLVM.rst:348
msgid ""
"Review the documentation and ensure that it is up to date.  The \"Release"
" Notes\" must be updated to reflect new features, bug fixes, new known "
"issues, and changes in the list of supported platforms.  The \"Getting "
"Started Guide\" should be updated to reflect the new release version "
"number tag available from Subversion and changes in basic system "
"requirements.  Merge both changes from mainline into the release branch."
msgstr ""

#: ../../HowToReleaseLLVM.rst:358
msgid "Tag the LLVM Final Release"
msgstr ""

#: ../../HowToReleaseLLVM.rst:360
msgid "Tag the final release sources using the tag.sh script in utils/release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:367
msgid "Update the LLVM Demo Page"
msgstr ""

#: ../../HowToReleaseLLVM.rst:369
msgid ""
"The LLVM demo page must be updated to use the new release.  This consists"
" of using the new ``clang`` binary and building LLVM."
msgstr ""

#: ../../HowToReleaseLLVM.rst:373
msgid "Update the LLVM Website"
msgstr ""

#: ../../HowToReleaseLLVM.rst:375
msgid ""
"The website must be updated before the release announcement is sent out."
"  Here is what to do:"
msgstr ""

#: ../../HowToReleaseLLVM.rst:378
msgid "Check out the ``www`` module from Subversion."
msgstr ""

#: ../../HowToReleaseLLVM.rst:380
msgid "Create a new subdirectory ``X.Y`` in the releases directory."
msgstr ""

#: ../../HowToReleaseLLVM.rst:382
msgid ""
"Commit the ``llvm``, ``test-suite``, ``clang`` source, ``clang "
"binaries``, ``dragonegg`` source, and ``dragonegg`` binaries in this new "
"directory."
msgstr ""

#: ../../HowToReleaseLLVM.rst:385
msgid ""
"Copy and commit the ``llvm/docs`` and ``LICENSE.txt`` files into this new"
" directory.  The docs should be built with ``BUILD_FOR_WEBSITE=1``."
msgstr ""

#: ../../HowToReleaseLLVM.rst:388
msgid ""
"Commit the ``index.html`` to the ``release/X.Y`` directory to redirect "
"(use from previous release)."
msgstr ""

#: ../../HowToReleaseLLVM.rst:391
msgid "Update the ``releases/download.html`` file with the new release."
msgstr ""

#: ../../HowToReleaseLLVM.rst:393
msgid ""
"Update the ``releases/index.html`` with the new release and link to "
"release documentation."
msgstr ""

#: ../../HowToReleaseLLVM.rst:396
msgid ""
"Finally, update the main page (``index.html`` and sidebar) to point to "
"the new release and release announcement.  Make sure this all gets "
"committed back into Subversion."
msgstr ""

#: ../../HowToReleaseLLVM.rst:401
msgid "Announce the Release"
msgstr ""

#: ../../HowToReleaseLLVM.rst:403
msgid "Have Chris send out the release announcement when everything is finished."
msgstr ""

