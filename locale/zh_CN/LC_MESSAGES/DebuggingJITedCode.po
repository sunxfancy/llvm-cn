# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../DebuggingJITedCode.rst:3
msgid "Debugging JIT-ed Code With GDB"
msgstr "使用GDB来debug由JIT生成的机器码"

#: ../../DebuggingJITedCode.rst:6
msgid "Background"
msgstr ""

#: ../../DebuggingJITedCode.rst:8
msgid ""
"Without special runtime support, debugging dynamically generated code "
"with GDB (as well as most debuggers) can be quite painful.  Debuggers "
"generally read debug information from the object file of the code, but "
"for JITed code, there is no such file to look for."
msgstr ""

#: ../../DebuggingJITedCode.rst:13
msgid ""
"In order to communicate the necessary debug info to GDB, an interface for"
" registering JITed code with debuggers has been designed and implemented "
"for GDB and LLVM MCJIT.  At a high level, whenever MCJIT generates new "
"machine code, it does so in an in-memory object file that contains the "
"debug information in DWARF format.  MCJIT then adds this in-memory object"
" file to a global list of dynamically generated object files and calls a "
"special function (``__jit_debug_register_code``) marked noinline that GDB"
" knows about.  When GDB attaches to a process, it puts a breakpoint in "
"this function and loads all of the object files in the global list.  When"
" MCJIT calls the registration function, GDB catches the breakpoint "
"signal, loads the new object file from the inferior's memory, and resumes"
" the execution.  In this way, GDB can get the necessary debug "
"information."
msgstr ""

#: ../../DebuggingJITedCode.rst:27
msgid "GDB Version"
msgstr ""

#: ../../DebuggingJITedCode.rst:29
msgid ""
"In order to debug code JIT-ed by LLVM, you need GDB 7.0 or newer, which "
"is available on most modern distributions of Linux.  The version of GDB "
"that Apple ships with Xcode has been frozen at 6.3 for a while.  LLDB may"
" be a better option for debugging JIT-ed code on Mac OS X."
msgstr ""

#: ../../DebuggingJITedCode.rst:36
msgid "Debugging MCJIT-ed code"
msgstr ""

#: ../../DebuggingJITedCode.rst:38
msgid ""
"The emerging MCJIT component of LLVM allows full debugging of JIT-ed code"
" with GDB.  This is due to MCJIT's ability to use the MC emitter to "
"provide full DWARF debugging information to GDB."
msgstr ""

#: ../../DebuggingJITedCode.rst:42
msgid ""
"Note that lli has to be passed the ``-use-mcjit`` flag to JIT the code "
"with MCJIT instead of the old JIT."
msgstr ""

#: ../../DebuggingJITedCode.rst:46
msgid "Example"
msgstr ""

#: ../../DebuggingJITedCode.rst:48
msgid ""
"Consider the following C code (with line numbers added to make the "
"example easier to follow):"
msgstr ""

#: ../../DebuggingJITedCode.rst:83
msgid ""
"Here is a sample command line session that shows how to build and run "
"this code via ``lli`` inside GDB:"
msgstr ""

