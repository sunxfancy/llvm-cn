# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2003-2016, LLVM Project
# This file is distributed under the same license as the LLVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LLVM 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-17 11:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../GoldPlugin.rst:3
msgid "The LLVM gold plugin"
msgstr "LLVM gold插件"

#: ../../GoldPlugin.rst:6
msgid "Introduction"
msgstr ""

#: ../../GoldPlugin.rst:8
msgid ""
"Building with link time optimization requires cooperation from the system"
" linker. LTO support on Linux systems requires that you use the `gold "
"linker`_ which supports LTO via plugins. This is the same mechanism used "
"by the `GCC LTO`_ project."
msgstr ""

#: ../../GoldPlugin.rst:13
msgid ""
"The LLVM gold plugin implements the gold plugin interface on top of "
":ref:`libLTO`.  The same plugin can also be used by other tools such as "
"``ar`` and ``nm``."
msgstr ""

#: ../../GoldPlugin.rst:24
msgid "How to build it"
msgstr ""

#: ../../GoldPlugin.rst:26
msgid ""
"You need to have gold with plugin support and build the LLVMgold plugin. "
"Check whether you have gold running ``/usr/bin/ld -v``. It will report "
"\"GNU gold\" or else \"GNU ld\" if not. If you have gold, check for "
"plugin support by running ``/usr/bin/ld -plugin``. If it complains "
"\"missing argument\" then you have plugin support. If not, such as an "
"\"unknown option\" error then you will either need to build gold or "
"install a version with plugin support."
msgstr ""

#: ../../GoldPlugin.rst:33
msgid "Download, configure and build gold with plugin support:"
msgstr ""

#: ../../GoldPlugin.rst:43
msgid ""
"That should leave you with ``build/gold/ld-new`` which supports the "
"``-plugin`` option. Running ``make`` will additionally build "
"``build/binutils/ar`` and ``nm-new`` binaries supporting plugins."
msgstr ""

#: ../../GoldPlugin.rst:47
msgid ""
"Build the LLVMgold plugin.  If building with autotools, run configure "
"with ``--with-binutils-include=/path/to/binutils/include`` and run "
"``make``. If building with CMake, run cmake with "
"``-DLLVM_BINUTILS_INCDIR=/path/to/binutils/include``.  The correct "
"include path will contain the file ``plugin-api.h``."
msgstr ""

#: ../../GoldPlugin.rst:54
msgid "Usage"
msgstr ""

#: ../../GoldPlugin.rst:56
msgid ""
"The linker takes a ``-plugin`` option that points to the path of the "
"plugin ``.so`` file. To find out what link command ``gcc`` would run in a"
" given situation, run ``gcc -v [...]`` and look for the line where it "
"runs ``collect2``. Replace that with ``ld-new -plugin "
"/path/to/LLVMgold.so`` to test it out. Once you're ready to switch to "
"using gold, backup your existing ``/usr/bin/ld`` then replace it with "
"``ld-new``."
msgstr ""

#: ../../GoldPlugin.rst:64
msgid ""
"You should produce bitcode files from ``clang`` with the option "
"``-flto``. This flag will also cause ``clang`` to look for the gold "
"plugin in the ``lib`` directory under its prefix and pass the ``-plugin``"
" option to ``ld``. It will not look for an alternate linker, which is why"
" you need gold to be the installed system linker in your path."
msgstr ""

#: ../../GoldPlugin.rst:70
msgid ""
"``ar`` and ``nm`` also accept the ``-plugin`` option and it's possible to"
" to install ``LLVMgold.so`` to ``/usr/lib/bfd-plugins`` for a seamless "
"setup. If you built your own gold, be sure to install the ``ar`` and "
"``nm-new`` you built to ``/usr/bin``."
msgstr ""

#: ../../GoldPlugin.rst:77
msgid "Example of link time optimization"
msgstr ""

#: ../../GoldPlugin.rst:79
msgid ""
"The following example shows a worked example of the gold plugin mixing "
"LLVM bitcode and native code."
msgstr ""

#: ../../GoldPlugin.rst:123
msgid ""
"Gold informs the plugin that foo3 is never referenced outside the IR, "
"leading LLVM to delete that function. However, unlike in the :ref:`libLTO"
" example <libLTO-example>` gold does not currently eliminate foo4."
msgstr ""

#: ../../GoldPlugin.rst:128
msgid "Quickstart for using LTO with autotooled projects"
msgstr ""

#: ../../GoldPlugin.rst:130
msgid ""
"Once your system ``ld``, ``ar``, and ``nm`` all support LLVM bitcode, "
"everything is in place for an easy to use LTO build of autotooled "
"projects:"
msgstr ""

#: ../../GoldPlugin.rst:133
msgid ""
"Follow the instructions :ref:`on how to build LLVMgold.so <lto-how-to-"
"build>`."
msgstr ""

#: ../../GoldPlugin.rst:136
msgid "Install the newly built binutils to ``$PREFIX``"
msgstr ""

#: ../../GoldPlugin.rst:138
msgid "Copy ``Release/lib/LLVMgold.so`` to ``$PREFIX/lib/bfd-plugins/``"
msgstr ""

#: ../../GoldPlugin.rst:140
msgid ""
"Set environment variables (``$PREFIX`` is where you installed clang and "
"binutils):"
msgstr ""

#: ../../GoldPlugin.rst:151
msgid "Or you can just set your path:"
msgstr ""

#: ../../GoldPlugin.rst:159
msgid "Configure and build the project as usual:"
msgstr ""

#: ../../GoldPlugin.rst:165
msgid ""
"The environment variable settings may work for non-autotooled projects "
"too, but you may need to set the ``LD`` environment variable as well."
msgstr ""

#: ../../GoldPlugin.rst:169
msgid "Licensing"
msgstr ""

#: ../../GoldPlugin.rst:171
msgid ""
"Gold is licensed under the GPLv3. LLVMgold uses the interface file "
"``plugin-api.h`` from gold which means that the resulting ``LLVMgold.so``"
" binary is also GPLv3. This can still be used to link non-GPLv3 programs "
"just as much as gold could without the plugin."
msgstr ""

